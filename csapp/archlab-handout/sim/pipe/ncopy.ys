#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
 	# Loop header
 	iaddq $-10,%rdx # len < 10?
 	jl Root # if so, goto Done:
start:
	mrmovq (%rdi),%r10
	mrmovq 0x08(%rdi),%r11
	rmmovq %r10,0x00(%rsi)
	andq %r10,%r10
	jle l1
	iaddq $1,%rax
l1: mrmovq 0x10(%rdi),%r10
	rmmovq %r11,0x08(%rsi)
	andq %r11,%r11
	jle l2
	iaddq $1,%rax
l2:	mrmovq 0x18(%rdi),%r11
	rmmovq %r10,0x10(%rsi)
	andq %r10,%r10
	jle l3
	iaddq $1,%rax
l3: mrmovq 0x20(%rdi),%r10
	rmmovq %r11,0x18(%rsi)
	andq %r11,%r11
	jle l4
	iaddq $1,%rax
l4:	mrmovq 0x28(%rdi),%r11
	rmmovq %r10,0x20(%rsi)
	andq %r10,%r10
	jle l5
	iaddq $1,%rax
l5: mrmovq 0x30(%rdi),%r10
	rmmovq %r11,0x28(%rsi)
	andq %r11,%r11
	jle l6
	iaddq $1,%rax
l6:	mrmovq 0x38(%rdi),%r11
	rmmovq %r10,0x30(%rsi)
	andq %r10,%r10
	jle l7
	iaddq $1,%rax
l7: mrmovq 0x40(%rdi),%r10
	rmmovq %r11,0x38(%rsi)
	andq %r11,%r11
	jle l8
	iaddq $1,%rax
l8:	mrmovq 0x48(%rdi),%r11
	rmmovq %r10,0x40(%rsi)
	andq %r10,%r10
	jle l9
	iaddq $1,%rax
l9:	rmmovq %r11,0x48(%rsi)
	andq %r11,%r11
	jle l0
	iaddq $1,%rax
l0:		
	iaddq $0x50,%rsi
	iaddq $0x50,%rdi
	iaddq $-10, %rdx
	jge start

Root:
	iaddq	$7,%rdx		# len <= 3
	jl	Left
	jg	Right	
	je	Remain3		# len == 3 Middle
	

Left:
	iaddq	$2,%rdx		# len == 1
	je	Remain1
	iaddq	$-1,%rdx	# len == 2
	je	Remain2
	ret			# len == 0 
Right:
	iaddq	$-3,%rdx	# len <= 6 
	jg	RightRight
	je	Remain6		# len == 6
	iaddq	$1,%rdx		# RightLeft
	je	Remain5		# len == 5
	jmp	Remain4		# len == 4
	
RightRight:
	iaddq	$-2,%rdx
	jl	Remain7
	je	Remain8

Remain9:
	mrmovq 64(%rdi), %r11	# read val from src...
	rmmovq %r11, 64(%rsi)
	andq %r11, %r11		# val <= 0?

Remain8:
	mrmovq 56(%rdi), %r11	# read val from src...
	jle Remain82		# if so, goto Npos:
	iaddq $0x1, %rax		# count++

Remain82:
	
	rmmovq %r11, 56(%rsi)
	andq %r11, %r11		# val <= 0?
Remain7:
	mrmovq 48(%rdi), %r11	# read val from src...
	jle Remain72		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain72:
		
	rmmovq %r11, 48(%rsi)
	andq %r11, %r11		# val <= 0?

Remain6:
	mrmovq 40(%rdi), %r11	# read val from src...
	jle Remain62		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain62:
		
	rmmovq %r11, 40(%rsi)
	andq %r11, %r11		# val <= 0?
Remain5:
	mrmovq 32(%rdi), %r11	# read val from src...
	jle Remain52		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain52:
		
	rmmovq %r11, 32(%rsi)
	andq %r11, %r11		# val <= 0?
Remain4:
	mrmovq 24(%rdi), %r11	# read val from src...
	jle Remain42	# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain42:

	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
Remain3:
	mrmovq 16(%rdi), %r11	# read val from src...
	jle Remain32		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain32:

	rmmovq %r11, 16(%rsi)
	andq %r11, %r11		# val <= 0?
Remain2:
	mrmovq 8(%rdi), %r11	# read val from src...
	jle Remain22		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain22:

	rmmovq %r11, 8(%rsi)
	andq %r11, %r11		# val <= 0?
Remain1:
	mrmovq (%rdi), %r11	# read val from src...
	jle Remain12		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain12:
	
	rmmovq %r11, (%rsi)
	andq %r11, %r11		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
