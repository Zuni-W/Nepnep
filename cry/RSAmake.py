#coding=utf-8
import math
import sys
from gmpy2 import *
from Crypto.PublicKey import RSA
p= 3133337
q=25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939
e=0x10001
n=p*q
ph=(p-1)*(q-1)
d=invert(e,ph)

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from base64 import b64decode
key_info = RSA.construct((n,long(e),long(d),long(p), long(q)))

key = RSA.importKey(key_info.exportKey())
key = PKCS1_OAEP.new(key)
f = open('./flag.enc',"r").read()
c = b64decode(f)
flag = key.decrypt(c)
print(flag)

